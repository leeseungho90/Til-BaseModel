globals:
    ################## Stage 1
    coefficient1:         # 
        path: param\basemodel\nmlogit1.csv
        type: float
    ################## Stage 2
    coefficient2:
        path: param\basemodel\nmlogit2.csv
        type: float
    ################## Stage 3
    coefficient3:
        path: param\basemodel\nmlogit4.csv
        type: float
    # periodic permet d'importer les valeurs des taux de chômage qui évoluent d'une année à l'autre (comme par exemple, le taux de chomage)            
    #periodic:
        #    periodic:         
        #path: input/macro.csv
        # PERIOD is an implicit column of the periodic table (You need to put the name "PERIOD" in your table)
        #- unemp_rate: float
entities:
    person:
        processes:
            outwork:
                # TODO!!!!: il faudrait définir tous ces termes dans _person.yml!!!!!
                # UNEMPLOYMENT DURING THE LAST 5 YEARS
                # isunemployed$ signifie l'indicatrice du chômage il y a "$" années
                # Comme on avance dans le temps, isunemployed$ prend la valeur de isunemployed"$-1" et isunemployed1 prend l'état actuel
                - isunemployed5: if(isunemployed4>0,isunemployed4,0)
                - isunemployed4: if(isunemployed3>0,isunemployed3,0)  
                - isunemployed3: if(isunemployed2>0,isunemployed2,0)
                - isunemployed2: if(isunemployed1>0,isunemployed1,0)
                - isunemployed1: if(ISUNEMPLOYED,1,0)
                # durée de chômage pendant les 5 dernières années (i.e. somme des 5 indicatrices précédentes)
                - unempdur5: isunemployed5 + isunemployed4 + isunemployed3 + isunemployed2 + isunemployed1
                # INACTIVITY DURING THE LAST 5 YEARS
                - isinactive5: if(isinactive4>0,isinactive4,0)
                - isinactive4: if(isinactive3>0,isinactive3,0)
                - isinactive3: if(isinactive2>0,isinactive2,0)
                - isinactive2: if(isinactive1>0,isinactive1,0)
                - isinactive1: if(ISOTHERINACTIVE,1,0)
                # durée d'inactivité pendant les 5 dernières années (i.e. somme des 5 indicatrices précédentes)
                - inacdur5: isinactive5 + isinactive4 + isinactive3 + isinactive2 + isinactive1
                # INVALIDITY DURING THE LAST 5 YEARS
                - isinvalid5: if(isinvalid4>0,isinvalid4,0)
                - isinvalid4: if(isinvalid3>0,isinvalid3,0)
                - isinvalid3: if(isinvalid2>0,isinvalid2,0)
                - isinvalid2: if(isinvalid1>0,isinvalid1,0)
                - isinvalid1: if(ISINVALID,1,0)
                # durée d'invalidité pendant les 5 dernières années (i.e. somme des 5 indicatrices précédentes)
                - invaldur5: isinvalid5 + isinvalid4 + isinvalid3 + isinvalid2 + isinvalid1
           # Probability of transition from the reference state
            inwork:
                 # Estimation is done separately for men and women
                 # denominator of the logit function
                 ################## Stage 1
                 #- inwork_prob_m: logistic(coefficient1m.inwork_age_m*age + coefficient1m.inwork_age2_m*age*age + coefficient1m.inwork_xpr_m*xpr + coefficient1m.inwork_xpr2_m*xpr*xpr 
                 #                                 + coefficient1m.inwork_chomage5_m*unempdur5 + coefficient1m.inwork_invalide5_m*invaldur5 + coefficient1m.inwork_inactif5_m*inacdur5 
                 #                                 + coefficient1m.inwork_afe_m*findet + coefficient1m.inwork_cons_m)
                 - inwork_prob_m: logistic(coefficient1[0,0]*age + coefficient1[0,1]*age*age + coefficient1[0,2]*xpr + coefficient1[0,3]*xpr*xpr
                                  + coefficient1[0,4]*unempdur5 + coefficient1[0,5]*invaldur5 + coefficient1[0,6]*inacdur5 + coefficient1[0,7]*findet + coefficient1[0,8])
                 - inwork_prob_f: logistic(coefficient1[1,0]*age + coefficient1[1,1]*age*age + coefficient1[1,2]*xpr + coefficient1[1,3]*xpr*xpr 
                                  + coefficient1[1,4]*unempdur5 + coefficient1[1,5]*invaldur5 + coefficient1[1,6]*inacdur5
                                  + coefficient1[1,7]*findet + coefficient1[1,8]*nb_enf + coefficient1[1,9]*age*nb_enf + coefficient1[1,10])
                 - inwork_prob: if(ISMALE, inwork_prob_m, inwork_prob_f )
                 #- show("inwork","inwork")
                 ################## Stage 2
                 - denom_m_1: exp(coefficient2[0,0]*age + coefficient2[0,1]*age*age + coefficient2[0,2]*xpr + coefficient2[0,3]*xpr*xpr 
                            + coefficient2[0,4]*unempdur5 
                            + coefficient2[0,5]*invaldur5 + coefficient2[0,6]*inacdur5 + coefficient2[0,7])
                 - denom_m_2: exp(coefficient2[0,16]*age + coefficient2[0,17]*age*age + coefficient2[0,18]*xpr + coefficient2[0,19]*xpr*xpr
                           + coefficient2[0,20]*unempdur5 + coefficient2[0,21]*invaldur5 + coefficient2[0,22]*inacdur5 + coefficient2[0,23])
                 - denom_m: 1 + denom_m_1 + denom_m_2
                 #                    
                 - denom_f_1: exp(coefficient2[1,0]*age + coefficient2[1,1]*age*age + coefficient2[1,2]*xpr + coefficient2[1,3]*xpr*xpr
                            + coefficient2[1,4]*unempdur5 + coefficient2[1,5]*invaldur5 + coefficient2[1,6]*inacdur5 + coefficient2[1,7]*nb_enf 
                            + coefficient2[1,8]*age*nb_enf+ coefficient2[1,9])
                 - denom_f_2: exp(coefficient2[1,20]*age + coefficient2[1,21]*age*age + coefficient2[1,22]*xpr + coefficient2[1,23]*xpr*xpr
                           + coefficient2[1,24]*unempdur5 + coefficient2[1,25]*invaldur5 + coefficient2[1,26]*inacdur5
                           + coefficient2[1,27]*nb_enf + coefficient2[1,28]*age*nb_enf+ coefficient2[1,29])
                 - denom_f: 1 + denom_f_1 + denom_f_2
                 # 
                 - denom: if(ISMALE, denom_m, denom_f)
                 #
                 - private_prob: if(ISMALE, inwork_prob*denom_m_1/denom, inwork_prob*denom_f_1/denom)
                 - independent_prob: inwork_prob*1/denom
                 - public_prob: if(ISMALE, inwork_prob*denom_m_2/denom, inwork_prob*denom_f_2/denom)
                 ################## Stage 3
                 - cadre_prob_m: logistic(coefficient3[0,0]*age + coefficient3[0,1]*age*age + coefficient3[0,2]*xpr + coefficient3[0,3]*xpr*xpr 
                                 + coefficient3[0,4]*findet + coefficient3[0,5])
                 - cadre_prob_f: logistic(coefficient3[1,0]*age + coefficient3[1,1]*age*age + coefficient3[1,2]*xpr + coefficient3[1,3]*xpr*xpr 
                                 + coefficient3[1,4]*findet + coefficient3[1,5]*nb_enf + coefficient3[1,6]*age*nb_enf + coefficient3[1,7])
                 - cadre_prob: if(ISMALE,  inwork_prob*private_prob*cadre_prob_m,  inwork_prob*private_prob*cadre_prob_f)
                 # 
                 - non_cadre_prob: if(ISMALE, inwork_prob*private_prob*(1-cadre_prob_m), inwork_prob*private_prob*(1-cadre_prob_f))
                 #
                 - actif_prob_m: logistic( coefficient3[2,0]*age + coefficient3[2,1]*age*age + coefficient3[2,2]*xpr + coefficient3[2,3]*xpr*xpr 
                                 + coefficient3[2,4]*findet + coefficient3[2,5])
                 - actif_prob_f: logistic(coefficient3[3,0]*age + coefficient3[3,1]*age*age + coefficient3[3,2]*xpr + coefficient3[3,3]*xpr*xpr
                               + coefficient3[3,4]*findet + coefficient3[3,5]*nb_enf + coefficient3[3,6]*age*nb_enf + coefficient3[3,7])
                 - actif_prob: if(ISMALE,  inwork_prob*public_prob*actif_prob_m,  inwork_prob*public_prob*actif_prob_f)
                 - seden_prob: if(ISMALE,  inwork_prob*public_prob*(1-actif_prob_m),  inwork_prob*public_prob*(1-actif_prob_f))
                 #
                 #
                 #
                 #
                 - denom2_m_1: exp(coefficient2[2,8]*age + coefficient2[2,9]*age*age + coefficient2[2,10]*xpr + coefficient2[2,11]*xpr*xpr
                             + coefficient2[2,12]*unempdur5 +coefficient2[2,13]*invaldur5 + coefficient2[2,14]*inacdur5 +coefficient2[2,15])
                 - denom2_m_2: exp(coefficient2[2,16]*age + coefficient2[2,17]*age*age + coefficient2[2,18]*xpr + coefficient2[2,19]*xpr*xpr
                            + coefficient2[2,20]*unempdur5 + coefficient2[2,21]*invaldur5 + coefficient2[2,22]*inacdur5 + coefficient2[2,23])
                 - denom2_m: 1 + denom_m_1 + denom_m_2
                 - denom2_f_1: exp(coefficient2[3,10]*age + coefficient2[3,11]*age*age + coefficient2[3,12]*xpr + coefficient2[3,13]*xpr*xpr 
                           + coefficient2[3,14]*unempdur5 + coefficient2[3,15]*invaldur5 + coefficient2[3,16]*inacdur5
                           + coefficient2[3,17]*nb_enf + coefficient2[3,18]*age*nb_enf+ coefficient2[3,19])
                 - denom2_f_2: exp(coefficient2[3,20]*age + coefficient2[3,21]*age*age + coefficient2[3,22]*xpr + coefficient2[3,23]*xpr*xpr 
                           + coefficient2[3,24]*unempdur5 + coefficient2[3,25]*invaldur5 + coefficient2[3,26]*inacdur5
                           + coefficient2[3,27]*nb_enf + coefficient2[3,28]*age*nb_enf+ coefficient2[3,29])
                 - denom2_f: 1 + denom_f_1 + denom_f_2
                 - denom2: if(ISMALE, denom2_m, denom2_f)
                 #
                 - invalid_prob: (1 - inwork_prob)*1/denom2
                 - unemployed_prob: if(ISMALE, (1 - inwork_prob)*denom2_m_1/denom2, (1 - inwork_prob)*denom2_f_1/denom2)
                 - inactive_prob: if(ISMALE, (1 - inwork_prob)*denom2_m_2/denom2, (1 - inwork_prob)*denom2_f_2/denom2)
            
#            show_prob: show(inactive_prob, unemployed_prob, non_cadre_prob, cadre_prob, actif_prob, seden_prob, independent_prob, invalid_prob)
           # DECISION
                # TODO: reprendre les valeurs importées sur le taux de chômage
                 - to_work: align(0.0, filter = ISUNEMPLOYED, proportions=0.05) # unemp_rate est issu de la projection INSEE
                 #- invalid_prob: 1 - inactive_prob - unemployed_prob - non_cadre_prob - cadre_prob - actif_prob - seden_prob - independent_prob
                # The assignment is done based on the threshold probability computed above
                # Choice function draws randomly a value from the uniform distribution [0,1] and assigns the agent to the proper state
                 #- type_act: if(to_work, choice([INACTIVE, UNEMPLOYED, NON_CADRE, CADRE, FONCT_A, FONCT_S, INDEP, INVALID ],
                  #           [inactive_prob, unemployed_prob, non_cadre_prob, cadre_prob, actif_prob, seden_prob, independent_prob, invalid_prob]), 0)
           # INDIVIDUAL CHARACTERISTIC (updating)
                 # Nombre d'années d'expérience
                 - xpr: if(ISINWORK,xpr + 1,xpr)
                #- ISUNEMPLOYED: (type_act == UNEMPLOYED)
                #- ISOTHERINACTIVE: (type_act == INACTIVE)
                #- ISRETIRED: (type_act == RETIRED)